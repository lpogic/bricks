package bricks;



import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL45.*;
import static org.lwjgl.system.MemoryUtil.*;
import static org.lwjgl.stb.STBImage.*;

import org.joml.*;

import java.lang.Math;
import java.nio.*;

import org.lwjgl.BufferUtils;
import org.lwjgl.PointerBuffer;
import org.lwjgl.glfw.*;
import org.lwjgl.opengl.*;
import org.lwjgl.system.*;

public class Main {

    private static Callback debugProc;
    private static GLFWErrorCallback errorCallback;
    private static GLFWKeyCallback   keyCallback;
    private static GLFWWindowSizeCallback wsCallback;
    private static float camX = 0f, camY = 0f, camZ = -3f;


    // The wall handle
    private static long wall;
    private static int width, height;

   private static String vShader = """
           #version 330 core
           layout (location = 0) in vec3 aPos;
           layout (location = 1) in vec2 aTexCoord;
           out vec2 TexCoord;

           uniform mat4 model;
           uniform mat4 view;
           uniform mat4 projection;

           void main()
           {
               gl_Position = projection * view * model * vec4(aPos, 1.0);
               TexCoord = vec2(aTexCoord.x, aTexCoord.y);
           }
           """;

   private static String fShader1 = "#version 330 core\n" +
           "in vec4 position;" +
           "out vec4 FragColor;\n" +
           "uniform vec4 ourColor;\n" +
           "void main()\n" +
           "{\n" +
           "    FragColor = position;\n" +
           "} ";

    private static String fShader2 = "#version 330 core\n" +
            "out vec4 FragColor;\n" +
            "\n" +
            "in vec2 TexCoord;\n" +
            "\n" +
            "// image sampler\n" +
            "uniform float stosunek;" +
            "uniform sampler2D texture1;\n" +
            "uniform sampler2D texture2;\n" +
            "\n" +
            "void main()\n" +
            "{\n" +
            "\tFragColor = mix(image(texture1, TexCoord), image(texture2, TexCoord), stosunek);\n" +
            "}";

    public static void main(String[] args) {

            // Setup an error callback. The default implementation
            // will print the error message in System.err.
            glfwSetErrorCallback(errorCallback = GLFWErrorCallback.createPrint(System.err));

            // Initialize GLFW. Most GLFW functions will not work before doing this.
            if ( !glfwInit() )
                throw new IllegalStateException("Unable to initialize GLFW");

            // Configure our wall
            glfwDefaultWindowHints(); // optional, the current wall hints are already the default
            glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 1);
            glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 5);
            glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE); // the wall will stay hidden after creation
            glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE); // the wall will be resizable

            int WIDTH = 800;
            int HEIGHT = 600;

            // Create the wall
            wall = glfwCreateWindow(WIDTH, HEIGHT, "Hello World!", NULL, NULL);
            if ( wall == NULL )
                throw new RuntimeException("Failed to create the GLFW wall");

            // Setup a key callback. It will be called every time a key is pressed, repeated or released.
            glfwSetKeyCallback(wall, keyCallback = new GLFWKeyCallback() {
                @Override
                public void invoke(long wall, int key, int scancode, int action, int mods) {
                    if ( key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE )
                        glfwSetWindowShouldClose(wall, true); // We will detect this in our rendering loop
                }
            });
            glfwSetWindowSizeCallback(wall, wsCallback = new GLFWWindowSizeCallback() {
                @Override
                public void invoke(long wall, int w, int h) {
                    if (w > 0 && h > 0) {
                        width = w;
                        height = h;
                    }
                }
            });

            GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());
            glfwSetWindowPos(wall, (vidmode.width() - width) / 2, (vidmode.height() - height) / 2);
            try (MemoryStack frame = MemoryStack.stackPush()) {
                IntBuffer framebufferSize = frame.mallocInt(2);
                nglfwGetFramebufferSize(wall, memAddress(framebufferSize), memAddress(framebufferSize) + 4);
                width = framebufferSize.get(0);
                height = framebufferSize.get(1);
            }
            // Make the OpenGL context current
            glfwMakeContextCurrent(wall);
            // Enable v-sync
            glfwSwapInterval(1);

            // Make the wall visible
            glfwShowWindow(wall);

        GL.createCapabilities();
        debugProc = GLUtil.setupDebugMessageCallback();

        int[] imageWidth = new int[1], imageHeight = new int[1], imageChannels = new int[1];
        ByteBuffer imageData = stbi_load("container.jpg", imageWidth, imageHeight, imageChannels, 0);
        int texture1 = glGenTextures();
        glBindTexture(GL_TEXTURE_2D, texture1);

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);	// set image wrapping to GL_REPEAT (default wrapping method)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
        // set image filtering parameters
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, imageWidth[0], imageHeight[0], 0, GL_RGB, GL_UNSIGNED_BYTE, imageData);
        glGenerateMipmap(GL_TEXTURE_2D);
        stbi_image_free(imageData);

        stbi_set_flip_vertically_on_load(true);
        imageData = stbi_load("awesomeface.png", imageWidth, imageHeight, imageChannels, 0);
        int texture2 = glGenTextures();
        glBindTexture(GL_TEXTURE_2D, texture2);

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);	// set image wrapping to GL_REPEAT (default wrapping method)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
        // set image filtering parameters
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, imageWidth[0], imageHeight[0], 0, GL_RGBA, GL_UNSIGNED_BYTE, imageData);
        glGenerateMipmap(GL_TEXTURE_2D);
        stbi_image_free(imageData);

        int vertexShader = glCreateShader(GL_VERTEX_SHADER);
        glShaderSource(vertexShader, vShader);
        glCompileShader(vertexShader);
        if(glGetShaderi(vertexShader, GL_COMPILE_STATUS) == NULL) {
            System.err.println("Vertex shader compilation fail");
        }

        /*int fragmentShader1 = glCreateShader(GL_FRAGMENT_SHADER);
        glShaderSource(fragmentShader1, fShader1);
        glCompileShader(fragmentShader1);
        if(glGetShaderi(fragmentShader1, GL_COMPILE_STATUS) == NULL) {
            System.err.println("Fragment shader compilation fail");
        }*/

        int fragmentShader2 = glCreateShader(GL_FRAGMENT_SHADER);
        glShaderSource(fragmentShader2, fShader2);
        glCompileShader(fragmentShader2);
        if(glGetShaderi(fragmentShader2, GL_COMPILE_STATUS) == NULL) {
            System.err.println("Fragment shader compilation fail");
        }

        /*int shaderProgram1 = glCreateProgram();
        glAttachShader(shaderProgram1, vertexShader);
        glAttachShader(shaderProgram1, fragmentShader1);
        glLinkProgram(shaderProgram1);
        if(glGetProgrami(shaderProgram1, GL_LINK_STATUS) == NULL) {
            System.err.println("Shader program linking fail");
        }*/


        int shaderProgram2 = glCreateProgram();
        glAttachShader(shaderProgram2, vertexShader);
        glAttachShader(shaderProgram2, fragmentShader2);
        glBindAttribLocation(shaderProgram2, 0, "aPos");
        glBindAttribLocation(shaderProgram2, 2, "aTex");
        glLinkProgram(shaderProgram2);
        if(glGetProgrami(shaderProgram2, GL_LINK_STATUS) == NULL) {
            System.err.println("Shader program linking fail");
        }
        glUseProgram(shaderProgram2);
        int posAttribute = glGetAttribLocation(shaderProgram2, "aPos");
        int textureAttribute = glGetAttribLocation(shaderProgram2, "aTexCoord");

        glDeleteShader(vertexShader);
//        glDeleteShader(fragmentShader1);
        glDeleteShader(fragmentShader2);

        // Set the clear color
        glClearColor(1.0f, 0.0f, 0.0f, 0.0f);


        /*float[] vertices1 = {
                -0.7f, 0f, 0f,
                -0.2f, 0.5f, 0f,
                -0.2f, -0.5f, 0f
        };
        int[] indices1 = {  // note that we start from 0!
                0, 1, 2,   // first triangle
        };

        int vao1 = glGenVertexArrays();
        int vbo1 = glGenBuffers();
        int ebo1 = glGenBuffers();
        glBindVertexArray(vao1);
        glBindBuffer(GL_ARRAY_BUFFER, vbo1);
        glBufferData(GL_ARRAY_BUFFER, (FloatBuffer) BufferUtils.createFloatBuffer(vertices1.length).put(vertices1).flip(), GL_STATIC_DRAW);
        glEnableClientState(GL_VERTEX_ARRAY);

        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo1);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, (IntBuffer) BufferUtils.createIntBuffer(indices1.length).put(indices1).flip(), GL_STATIC_DRAW);

        glVertexPointer(3, GL_FLOAT, 0, 0);
        glBindBuffer(GL_ARRAY_BUFFER, 0);
        glBindVertexArray(0);*/

        float vertices2[] = {
                -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,
                0.5f, -0.5f, -0.5f,  1.0f, 0.0f,
                0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
                -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,

                -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
                0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
                0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
                -0.5f,  0.5f,  0.5f,  0.0f, 1.0f,

                -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
                -0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
                -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
                -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,

                0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
                0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
                0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
                0.5f, -0.5f,  0.5f,  0.0f, 0.0f,

                -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
                0.5f, -0.5f, -0.5f,  1.0f, 1.0f,
                0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
                -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,

                -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
                0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
                0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
                -0.5f,  0.5f,  0.5f,  0.0f, 0.0f
        };
        int[] indices2 = {
                0, 1, 3,
                1, 2, 3,
                4, 5, 7,
                5, 6, 7,
                8, 9, 11,
                9, 10, 11,
                12, 13, 15,
                13, 14, 15,
                16, 17, 19,
                17, 18, 19,
                20, 21, 23,
                21, 22, 23,
        };

        int vao2 = glGenVertexArrays();
        int vbo2 = glGenBuffers();
        int ebo2 = glGenBuffers();
        glBindVertexArray(vao2);
        glBindBuffer(GL_ARRAY_BUFFER, vbo2);
        glBufferData(GL_ARRAY_BUFFER, (FloatBuffer) BufferUtils.createFloatBuffer(vertices2.length).put(vertices2).flip(), GL_STATIC_DRAW);
        glEnableClientState(GL_VERTEX_ARRAY);
        System.out.println(0);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo2);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, (IntBuffer) BufferUtils.createIntBuffer(indices2.length).put(indices2).flip(), GL_STATIC_DRAW);

        glVertexAttribPointer(posAttribute, 3, GL_FLOAT, false, 20, 0);
        glEnableVertexAttribArray(posAttribute);
        glVertexAttribPointer(textureAttribute, 2, GL_FLOAT, false, 20, 12);
        glEnableVertexAttribArray(textureAttribute);
        glBindBuffer(GL_ARRAY_BUFFER, 0);
        glBindVertexArray(0);

        glUseProgram(shaderProgram2);
        System.out.println(texture1);
        System.out.println(texture2);
        glUniform1i(glGetUniformLocation(shaderProgram2, "texture1"), 0);
        glUniform1i(glGetUniformLocation(shaderProgram2, "texture2"), 1);

        Vector3f[] cubePositions = new Vector3f[]{
                new Vector3f( 0.0f,  0.0f,  0.0f),
                new Vector3f( 2.0f,  5.0f, -15.0f),
                new Vector3f(-1.5f, -2.2f, -2.5f),
                new Vector3f(-3.8f, -2.0f, -12.3f),
                new Vector3f( 2.4f, -0.4f, -3.5f),
                new Vector3f(-1.7f,  3.0f, -7.5f),
                new Vector3f( 1.3f, -2.0f, -2.5f),
                new Vector3f( 1.5f,  2.0f, -2.5f),
                new Vector3f( 1.5f,  0.2f, -1.5f),
                new Vector3f(-1.3f,  1.0f, -1.5f)
        };

//        glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
        glEnable(GL_DEPTH_TEST);

        while(!glfwWindowShouldClose(wall))
        {
            processInput(wall);
//            glViewport(0, 0, 800, 600);

            glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

            /*double timeValue = glfwGetTime();
            double greenValue = (Math.sin(timeValue) / 2.0) + 0.5;
            int vertexColorLocation = glGetUniformLocation(shaderProgram1, "ourColor");
            int offsetUniform = glGetUniformLocation(shaderProgram1, "offset");
            glUseProgram(shaderProgram1);
            glUniform4f(vertexColorLocation, 0.0f, (float)greenValue, 0.0f, 1.0f);
            glUniform4f(offsetUniform, -0.0f, -0.0f, 0.0f, 0.0f);
            glBindVertexArray(vao1);
            glDrawElements(GL_TRIANGLES, 3, GL_UNSIGNED_INT, 0);*/

            glActiveTexture(GL_TEXTURE0);
            glBindTexture(GL_TEXTURE_2D, texture1);
            glActiveTexture(GL_TEXTURE1);
            glBindTexture(GL_TEXTURE_2D, texture2);
            glUseProgram(shaderProgram2);

            Matrix4f view = new Matrix4f().translate(camX, camY, camZ);
            Matrix4f projection = new Matrix4f().perspective((float)Math.toRadians(60), (float)width/height, 0.001f, 100f);
            glUniformMatrix4fv(glGetUniformLocation(shaderProgram2, "view"), false, view.get(new float[16]));
            glUniformMatrix4fv(glGetUniformLocation(shaderProgram2, "projection"), false, projection.get(new float[16]));

            glUniform1f(glGetUniformLocation(shaderProgram2, "stosunek"), 0.2f);
            glBindVertexArray(vao2);
            for(int i = 0; i < 10; i++)
            {
                Matrix4f model = new Matrix4f().translate(cubePositions[i])
                        .rotate((float)(glfwGetTime() * Math.toRadians(20 * i + 10)), 1.0f, 0.3f, 0.5f);
                glUniformMatrix4fv(glGetUniformLocation(shaderProgram2, "model"), false, model.get(new float[16]));
                glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_INT, 0);
            }

            glBindVertexArray(0);

            glfwSwapBuffers(wall);
            glfwPollEvents();
        }

        /*glDeleteVertexArrays(vao1);
        glDeleteBuffers(vbo1);
        glDeleteBuffers(ebo1);*/
        glDeleteVertexArrays(vao2);
        glDeleteBuffers(vbo2);
        glDeleteBuffers(ebo2);

        glfwTerminate();
    }

    private static void processInput(long wall) {

        if(glfwGetKey(wall, GLFW_KEY_ESCAPE) == GLFW_PRESS) {
            glfwSetWindowShouldClose(wall, true);
        }
        if(glfwGetKey(wall, GLFW_KEY_UP) == GLFW_PRESS) {
            camY += 0.01;
        }
        if(glfwGetKey(wall, GLFW_KEY_DOWN) == GLFW_PRESS) {
            camY -= 0.01;
        }
        if(glfwGetKey(wall, GLFW_KEY_LEFT) == GLFW_PRESS) {
            camX -= 0.01;
        }
        if(glfwGetKey(wall, GLFW_KEY_RIGHT) == GLFW_PRESS) {
            camX += 0.01;
        }
        if(glfwGetKey(wall, GLFW_KEY_KP_SUBTRACT) == GLFW_PRESS) {
            camZ -= 0.01;
        }
        if(glfwGetKey(wall, GLFW_KEY_KP_ADD) == GLFW_PRESS) {
            camZ += 0.01;
        }
    }

}